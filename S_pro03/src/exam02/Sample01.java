package exam02;

public class Sample01 {

	public static void main(String[] args) {
		/* 
		 * 반복문
		 * 		- 프로그램 코드의 실행을 제어하기 위해 사용하는 문법
		 * 		- 반복문은 for, while, do..,while이 있다.
		 * 		- 반복문은 0 ~ 무한 반복까지 자유롭게 설정할 수 있다.
		 * 		- 무한반복의 경우 프로그램의 실행이 무한번 동작하기 때문에 CPU에 부담을 줄 수 있다.(주의 할 것.)
		 * 		  만약 이클립스에서 원치 않은 무한반복이 동작 할 경우 프로그램을 강제 종료하면 된다. (console 정지 버튼)
		 */
		
		/*
		 * for문 형식
		 * 		for(초기식; 조건식; 증감식) {
		 * 			반복 실행할 코드는 여기에 작성
		 * 		}
		 * 
		 * 초기식 : 반복문에 반복 회수를 정할 때 초기에 사용할 값을 설정하기 위해 사용한다.
		 * 		  생략 가능하며, 반복문 외부에 미리 초기값을 성정해서 사용하기도 한다.
		 * 조건식 : 반복을 수행 여부의 조건을 설정하기 위해 사용한다.
		 * 		  조건식의 내용에 따라 반복 횟수가 달라진다. 또한 잘못된 조건식 설정으로 무한반복이 될 수 있다.
		 * 		  생략 가능하며, 단 생략을 하면 조건이 항상 참이 되어 무한 반복이 되며, 이를 제어하기 위해 반복문
		 * 		  내부에 별도의 if조건문과 break를 작성하여 종료 조건을 반드시 생성해야 한다.
		 * 증감식 : 값의 증감을 통해 반복문의 조건식을 맞추어 주기위해 사용한다.
		 * 		  주로 ++, -- 와 같은 증감연산을 사용한다. 단 증감값이 2 이상이 필요한 경우 복합할당 연산을 활용한다.
		 * 		  생략 가능하며, 단 생략을 하면 종료조건에 맞는 값을 설정할 수 없어 무한반복이 될 수 있다.
		 * 		  내부에 별도의 증감식을 반드시 작성해야 한다.
		 */
		
		for(int i = 0; i < 5; i++) {
			System.out.printf("%d 번째 반복\n", i);
		}
		
		// 초기식 생략
		int i = 0; // 미리 초기 값 설정
		
		for(; i < 5; i++) {
			System.out.printf("%d 번째 반복\n", i);
		}
		
		// 조건식 생략
		for(i = 0; ; i++) { // 중단 조건이 없기 때문에 무한반복 CPU무리!
			System.out.printf("%d 번째 반복\n", i);
			if(i >= 5) { // 반복문안에 if문 사용하여 조건 지정
				break;
			}
		}
		
		//증감식 생략
		for(i = 0; i < 5; ) {
			System.out.printf("%d 번째 반복\n", i);
			i++; // 증감식
		}
		
		// 전부 생략
		i = 0;
		for(;;) {
			System.out.printf("%d 번째 반복!!!\n", i);
			if(i >= 4) {
				break;
			}
			i++;

		}

	}
}
